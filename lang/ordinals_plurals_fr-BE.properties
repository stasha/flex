# Belgium (fr-BE)

# input params: [1, m] = [1, gender male]
test.message.m = J’étais {0}.ordinal et j’ai gagné la {0}.place.
# input params: [2, f] = [2, gender female]
test.message.f = J’étais {0}.ordinal et j’ai gagné deux {0}.récompense.
# input params: [3, n] = [3, gender neutral]
test.message.n = Le chiot est arrivé en tant que {0}.ordinal et a ainsi assuré une bonne {0}.position.

test.message.m.result = J’étais premier et j’ai gagné la première place.
test.message.f.result = J’étais deuxième et j’ai gagné deux récompenses.
test.message.n.result = Le chiot est arrivé en tant que troisième et a ainsi assuré une bonne position.

# key structure
#
# ordinal.[number]
# ordinal.1 = ...
# ordinal.[number from (inclusive)]-[number to (inclusive)]
# ordinal.1-5 = ...
# ordinal.[number ending with (inclusive)]
# ordinal.n3 = ... // all numbers ending with 3
# ordinal.[number from ending with (inclusive)]-[number to ending with (inclusive)]
# ordinal.n11-n13 = ... // all numbers ending with 11-13 (11, 12, 13)
# ordinal.other = ... used for all other not matched values
#
# value structure
#
# m = male
# f = female
# n = neutral
#
# ordinal.1 = [wordbase](m|f|n) 
# ordinal.2 = [wordbase](|f|)
# ordinal.3 = [wordbase](||) == wordbase
# ordinal.4 = [wordbase](a|a|a) == wordbase
# value = premi(er|ère|er) == premier | première | premier
# value = (premier|première|premier) = premier | première | premier
# 
#
# ORDER OF RECORDS DOES MATTER
# 
# Some languages may require more complex key logic to correctly cover ordinals.
# For example if there are keys defined:
# ordinal.n1 = num with ending 1
# ordinal.1 = premi(er|ère|er)
# 
# parser will always pick first one because value '1' matches pattern 'n1' (ends with 1).

ordinal.1 = premi(er|ère|er)
ordinal.2 = deuxième
ordinal.3 = troisième
ordinal.4 = quatrième
ordinal.5 = cinquième
ordinal.6 = sixième
ordinal.7 = septième
ordinal.8 = huitième
ordinal.9 = neuvième
ordinal.10 = dixième
ordinal.other = {0}ième

# plurals
#
# key structure:
#
# [word] = (singular) = ...
# place = place
# [word].other = (plural)
# place.other = places
#
# value structure is same as ordinals
# supporting gender structure
#
# [word] = [wordbase](m|f|n)

place = place
place.other = places
position = position
position.other = positions
récompense.1 = récompense
récompense.2-4 = récompenses
récompense.other = récompenses