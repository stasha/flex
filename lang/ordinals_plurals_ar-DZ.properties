# Algeria (ar-DZ)

# input params: [1, m] = [1, gender male]
test.message.m = كنت {0}.ordinal وفزت بـ {0}.مركز.
# input params: [2, f] = [2, gender female]
test.message.f = كنت {0}.ordinal وفزت بجائزتين {0}.جائزة.
# input params: [3, n] = [3, gender neutral]
test.message.n = وصل الجرو كـ {0}.ordinal وبالتالي ضمن {0}.موقع جيد.

test.message.m.result = كنت الأول وفزت بالمركز الأول.
test.message.f.result = كنت الثانية وفزت بجائزتين.
test.message.n.result = وصل الجرو كالثالث وبالتالي ضمن موقعًا جيدًا.

# key structure
#
# ordinal.[number]
# ordinal.1 = ...
# ordinal.[number from (inclusive)]-[number to (inclusive)]
# ordinal.1-5 = ...
# ordinal.[number ending with (inclusive)]
# ordinal.n3 = ... // all numbers ending with 3
# ordinal.[number from ending with (inclusive)]-[number to ending with (inclusive)]
# ordinal.n11-n13 = ... // all numbers ending with 11-13 (11, 12, 13)
# ordinal.other = ... used for all other not matched values
#
# value structure
#
# Arabic does not use grammatical gender for ordinals in this context, so values are simple strings.
# ordinal.1 = الأول
# ordinal.2 = الثاني
# 
# ORDER OF RECORDS DOES MATTER
# 
# Some languages may require more complex key logic to correctly cover ordinals.
# For example if there are keys defined:
# ordinal.n1 = num with ending 1
# ordinal.1 = الأول
# 
# parser will always pick first one because value '1' matches pattern 'n1' (ends with 1).

ordinal.1 = الأول
ordinal.2 = الثاني
ordinal.3 = الثالث
ordinal.4 = الرابع
ordinal.5 = الخامس
ordinal.6 = السادس
ordinal.7 = السابع
ordinal.8 = الثامن
ordinal.9 = التاسع
ordinal.10 = العاشر
ordinal.other = الـ{0}

# plurals
#
# key structure:
#
# [word] = (singular) = ...
# مركز = مركز
# [word].other = (plural)
# مركز.other = مراكز
#
# value structure is same as ordinals
# Arabic does not use gender in this context, so values are simple strings.
#
# [word] = [wordbase]

مركز = مركز
مركز.other = مراكز
موقع = موقع
موقع.other = مواقع
جائزة.1 = جائزة
جائزة.2-4 = جوائز
جائزة.other = جوائز