# Israel (he-IL)

# input params: [1, m] = [1, gender male]
test.message.m = הייתי {0}.ordinal וזכיתי ב{0}.מקום.
# input params: [2, f] = [2, gender female]
test.message.f = הייתי {0}.ordinal וזכיתי בשני {0}.פרס.
# input params: [3, n] = [3, gender neutral]
test.message.n = הגור הגיע כ{0}.ordinal ובכך הבטיח {0}.מיקום טוב.

test.message.m.result = הייתי ראשון וזכיתי במקום הראשון.
test.message.f.result = הייתי שנייה וזכיתי בשני פרסים.
test.message.n.result = הגור הגיע כשלישי ובכך הבטיח מיקום טוב.

# key structure
#
# ordinal.[number]
# ordinal.1 = ...
# ordinal.[number from (inclusive)]-[number to (inclusive)]
# ordinal.1-5 = ...
# ordinal.[number ending with (inclusive)]
# ordinal.n3 = ... // all numbers ending with 3
# ordinal.[number from ending with (inclusive)]-[number to ending with (inclusive)]
# ordinal.n11-n13 = ... // all numbers ending with 11-13 (11, 12, 13)
# ordinal.other = ... used for all other not matched values
#
# value structure
#
# Hebrew does not use grammatical gender for ordinals in this context, so values are simple strings.
# ordinal.1 = ראשון
# ordinal.2 = שני
# 
# ORDER OF RECORDS DOES MATTER
# 
# Some languages may require more complex key logic to correctly cover ordinals.
# For example if there are keys defined:
# ordinal.n1 = num with ending 1
# ordinal.1 = ראשון
# 
# parser will always pick first one because value '1' matches pattern 'n1' (ends with 1).

ordinal.1 = ראשון
ordinal.2 = שני
ordinal.3 = שלישי
ordinal.4 = רביעי
ordinal.5 = חמישי
ordinal.6 = שישי
ordinal.7 = שביעי
ordinal.8 = שמיני
ordinal.9 = תשיעי
ordinal.10 = עשירי
ordinal.other = {0}י

# plurals
#
# key structure:
#
# [word] = (singular) = ...
# מקום = מקום
# [word].other = (plural)
# מקום.other = מקומות
#
# value structure is same as ordinals
# Hebrew does not use gender in this context, so values are simple strings.
#
# [word] = [wordbase]

מקום = מקום
מקום.other = מקומות
מיקום = מיקום
מיקום.other = מיקומים
פרס.1 = פרס
פרס.2-4 = פרסים
פרס.other = פרסים