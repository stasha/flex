# Romania (ro-RO)

# input params: [1, m] = [1, gender male]
test.message.m = Am fost {0}.ordinal și am câștigat primul {0}.loc.
# input params: [2, f] = [2, gender female]
test.message.f = Am fost {0}.ordinal și am câștigat două {0}.premiu.accusative.
# input params: [3, n] = [3, gender neutral]
test.message.n = Puiul a sosit ca {0}.ordinal și astfel a asigurat o {0}.poziție.accusative.

test.message.m.result = Am fost primul și am câștigat primul loc.
test.message.f.result = Am fost a doua și am câștigat două premii.
test.message.n.result = Puiul a sosit ca al treilea și astfel a asigurat o poziție bună.

# key structure
#
# ordinal.[number]
# ordinal.1 = ...
# ordinal.[number from (inclusive)]-[number to (inclusive)]
# ordinal.1-5 = ...
# ordinal.[number ending with (inclusive)]
# ordinal.n3 = ... // all numbers ending with 3
# ordinal.[number from ending with (inclusive)]-[number to ending with (inclusive)]
# ordinal.n11-n13 = ... // all numbers ending with 11-13 (11, 12, 13)
# ordinal.other = ... used for all other not matched values
#
# value structure
#
# m = male
# f = female
# n = neutral
#
# ordinal.1 = [wordbase](m|f|n) 
# ordinal.2 = [wordbase](|f|)
# ordinal.3 = [wordbase](||) == wordbase
# ordinal.4 = [wordbase](a|a|a) == wordbase
# value = prim(ul|a|ul) == primul | prima | primul
# value = (primul|prima|primul) = primul | prima | primul
# 
#
# ORDER OF RECORDS DOES MATTER
# 
# Some languages may require more complex key logic to correctly cover ordinals.
# For example if there are keys defined:
# ordinal.n1 = num with ending 1
# ordinal.1 = prim(ul|a|ul)
# 
# parser will always pick first one because value '1' matches pattern 'n1' (ends with 1).

ordinal.1 = prim(ul|a|ul)
ordinal.2 = do(ilea|ua|ilea)
ordinal.3 = tre(ilea|ia|ilea)
ordinal.4 = patr(ul|ea|ul)
ordinal.5 = cinc(ilea|ea|ilea)
ordinal.6 = șas(ilea|ea|ilea)
ordinal.7 = șapt(ilea|ea|ilea)
ordinal.8 = opt(ilea|ea|ilea)
ordinal.9 = nou(ă|ă|ă)
ordinal.10 = zec(ea|ea|ea)
ordinal.other = {0}(lea|ea|lea)

# plurals
#
# key structure:
#
# [word] = (singular) = ...
# loc = loc
# [word].other = (plural)
# loc.other = locuri
#
# value structure is same as ordinals
# supporting gender structure
#
# [word] = [wordbase](m|f|n)

loc = loc
loc.other = locuri
poziție = poziție
poziție.other = poziții
poziție.accusative = poziție bună
premiu.1 = premiu
premiu.2-4 = premii
premiu.other = premii
premiu.accusative = premii
